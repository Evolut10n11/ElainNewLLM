import asyncio
import json
import websockets
import os

TOKEN_FILE   = "vtubeStudio_token.txt"
HOST         = "ws://localhost:8001"
PLUGIN_NAME  = "Elaine1"
PLUGIN_DEV   = "nvm1"

class VTubeStudioClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å VTube Studio Public API. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
    –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ WebSocket‚Äë—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç
    –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ.
    """

    def __init__(self) -> None:
        # –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω; —á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —É VTS.
        self.token: str | None = None
        # –¢–µ–∫—É—â–∏–π WebSocket‚Äë–∫–ª–∏–µ–Ω—Ç. –ú–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–µ–¥–∏–Ω–µ–Ω—ã.
        self.ws: websockets.WebSocketClientProtocol | None = None
        # –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø–∞—Ä–µ —Å
        # authenticated_ws, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        # –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
        self.authenticated: bool = False
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ WebSocket‚Äë—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        # –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–Ω—è–µ—Ç—Å—è, —Ç—Ä–µ–±—É–µ—Ç—Å—è
        # –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è.
        self._auth_ws: websockets.WebSocketClientProtocol | None = None

    async def connect(self) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WebSocket API VTube Studio, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
        –∏–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.
        """
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if self.ws is not None and not self.ws.closed:
            return
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        self.ws = await websockets.connect(HOST)

    async def send(self, payload: dict) -> dict:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ VTube Studio –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è.
        –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.
        """
        assert self.ws is not None, "WebSocket connection is not established"
        await self.ws.send(json.dumps(payload))
        response = await self.ws.recv()
        return json.loads(response)

    async def authenticate(self) -> None:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–ª–∞–≥–∏–Ω–∞ –≤ VTube Studio.
        –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–∑–æ–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω—ã: –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω,
        –º–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.
        """
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await self.connect()
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ, –≤—ã—Ö–æ–¥–∏–º
        if (
            self.authenticated
            and self.ws is not None
            and self.ws == self._auth_ws
            and not self.ws.closed
        ):
            return
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        if not os.path.exists(TOKEN_FILE):
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω —É VTS
            tok_req = {
                "apiName": "VTubeStudioPublicAPI",
                "apiVersion": "1.0",
                "requestID": "requestToken",
                "messageType": "AuthenticationTokenRequest",
                "data": {
                    "pluginName": PLUGIN_NAME,
                    "pluginDeveloper": PLUGIN_DEV,
                },
            }
            tok_res = await self.send(tok_req)
            self.token = tok_res["data"]["authenticationToken"]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            with open(TOKEN_FILE, "w", encoding="utf-8") as f:
                f.write(self.token)
            # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç—É–ø
            print("üîê –¢–µ–ø–µ—Ä—å –≤ VTube Studio –Ω–∞–∂–º–∏—Ç–µ ¬´Allow¬ª, –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ Enter‚Ä¶")
            try:
                input()
            except EOFError:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º EOFError –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
                pass
        else:
            # –ß–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
            with open(TOKEN_FILE, "r", encoding="utf-8") as f:
                self.token = f.read().strip()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —Ç–æ–∫–µ–Ω–æ–º
        auth_req = {
            "apiName": "VTubeStudioPublicAPI",
            "apiVersion": "1.0",
            "requestID": "auth",
            "messageType": "AuthenticationRequest",
            "data": {
                "pluginName": PLUGIN_NAME,
                "pluginDeveloper": PLUGIN_DEV,
                "authenticationToken": self.token,
            },
        }
        auth_res = await self.send(auth_req)
        if not auth_res["data"].get("authenticated"):
            raise RuntimeError("‚ùå Auth failed: " + auth_res["data"].get("reason", ""))
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –º—ã —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ç–µ–∫—É—â–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
        self.authenticated = True
        self._auth_ws = self.ws
        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")

    async def set_mouth_open(self, value: float) -> None:
        """
        –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ MouthOpen.
        –î–∏–∞–ø–∞–∑–æ–Ω value: 0.0 (—Ä–æ—Ç –∑–∞–∫—Ä—ã—Ç) ... 1.0 (—Ä–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫—Ä—ã—Ç).
        """
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã
        await self.connect()
        # authenticate() –ø—Ä–æ–≤–µ—Ä–∏—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        await self.authenticate()
        payload = {
            "apiName": "VTubeStudioPublicAPI",
            "apiVersion": "1.0",
            "requestID": "mouthMove",
            "messageType": "InjectParameterDataRequest",
            "data": {
                "parameterValues": [
                    {"id": "MouthOpen", "value": value}
                ]
            },
        }
        res = await self.send(payload)
        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–æ–∂–∏–¥–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π data –ø—Ä–∏ —É—Å–ø–µ—Ö–µ)
        #print(f"üì§ InjectParameterDataResponse: {res}")
