import asyncio
import json
import websockets
import os

# –ò–º—è —Ñ–∞–π–ª–∞ —Å —Ç–æ–∫–µ–Ω–æ–º (—Ä–æ–≤–Ω–æ –∫–∞–∫ —É –≤–∞—Å –Ω–∞ –¥–∏—Å–∫–µ)
TOKEN_FILE   = "vtubeStudio_token"
HOST         = "ws://localhost:8001"
PLUGIN_NAME  = "Elaine1"
PLUGIN_DEV   = "nvm1"

class VTubeStudioClient:
    def __init__(self):
        self.token = None

    async def _connect(self):
        try:
            return await websockets.connect(HOST)
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VTube Studio –ø–æ {HOST}: {e}")
            return None

    async def authenticate(self):
        # 1) –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω
        if not os.path.exists(TOKEN_FILE):
            ws = await self._connect()
            if not ws: return
            await ws.send(json.dumps({
                "apiName":"VTubeStudioPublicAPI",
                "apiVersion":"1.0",
                "requestID":"requestToken",
                "messageType":"AuthenticationTokenRequest",
                "data":{
                    "pluginName":PLUGIN_NAME,
                    "pluginDeveloper":PLUGIN_DEV
                }
            }))
            res = json.loads(await ws.recv())
            self.token = res["data"]["authenticationToken"]
            with open(TOKEN_FILE, "w", encoding="utf-8") as f:
                f.write(self.token)
            await ws.close()
        else:
            with open(TOKEN_FILE, "r", encoding="utf-8") as f:
                self.token = f.read().strip()

        # 2) –ñ–¥—ë–º, –ø–æ–∫–∞ –≤—ã –Ω–∞–∂–º—ë—Ç–µ Allow –≤ VTube Studio
        print("üîê –¢–µ–ø–µ—Ä—å –≤ VTube Studio –Ω–∞–∂–º–∏—Ç–µ ¬´Allow¬ª, –ø–æ—Ç–æ–º Enter‚Ä¶")
        input()

        # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        ws = await self._connect()
        if not ws: return
        await ws.send(json.dumps({
            "apiName":"VTubeStudioPublicAPI",
            "apiVersion":"1.0",
            "requestID":"auth",
            "messageType":"AuthenticationRequest",
            "data":{
                "pluginName":PLUGIN_NAME,
                "pluginDeveloper":PLUGIN_DEV,
                "authenticationToken":self.token
            }
        }))
        auth_res = json.loads(await ws.recv())
        await ws.close()
        if not auth_res["data"].get("authenticated"):
            raise RuntimeError("‚ùå Auth failed: " + auth_res["data"].get("reason",""))
        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")

    async def set_mouth_open(self, value: float):
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è —Ä—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ WS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        ws = await self._connect()
        if not ws: return
        await ws.send(json.dumps({
            "apiName":"VTubeStudioPublicAPI",
            "apiVersion":"1.0",
            "requestID":"mouthMove",
            "messageType":"InjectParameterDataRequest",
            "data":{
                "pluginName":PLUGIN_NAME,
                "pluginDeveloper":PLUGIN_DEV,
                "authenticationToken":self.token,
                "parameterValues":[{"id":"MouthOpen","value":value}]
            }
        }))
        try:
            await ws.recv()  # –∂–¥—ë–º ACK
        except:
            pass
        finally:
            await ws.close()

# –ï–¥–∏–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ main.py –∏ tts_silero.py
vts_client = VTubeStudioClient()
