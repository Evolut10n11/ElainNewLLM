import whisper
import numpy as np
import sounddevice as sd
import torch

THRESHOLD = 500
SAMPLE_RATE = 16000
MAX_RECORD_SECONDS = 3.5
MIN_DURATION = 0.5

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –æ–¥–∏–Ω —Ä–∞–∑ (medium –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
whisper_model = whisper.load_model("medium").to("cuda" if torch.cuda.is_available() else "cpu")

def wait_for_voice(threshold=THRESHOLD, timeout=10):
    print("üéô –ñ–¥—É –Ω–∞—á–∞–ª–∞ —Ä–µ—á–∏...")
    for _ in range(int(timeout * 2)):
        audio = sd.rec(int(SAMPLE_RATE * 0.5), samplerate=SAMPLE_RATE, channels=1, dtype='int16')
        sd.wait()
        volume = max(abs(audio.flatten()))
        if volume > threshold:
            print("üü¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –≥–æ–ª–æ—Å, –Ω–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å...")
            return True
    print("üîá –ì–æ–ª–æ—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ‚Äî —Ç–∞–π–º–∞—É—Ç.")
    return False

def record_vad(seconds=MAX_RECORD_SECONDS) -> np.ndarray:
    if not wait_for_voice():
        return np.array([], dtype=np.int16)
    audio = sd.rec(int(SAMPLE_RATE * seconds), samplerate=SAMPLE_RATE, channels=1, dtype='int16')
    sd.wait()
    volume = max(abs(audio.flatten()))
    if volume < THRESHOLD:
        print("üîá –°–ª–∏—à–∫–æ–º —Ç–∏—Ö–æ, –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞—é.")
        return np.array([], dtype=np.int16)
    return audio.flatten()

def transcribe_vad(audio: np.ndarray) -> str:
    print("üß† –†–∞—Å–ø–æ–∑–Ω–∞—ë–º –≥–æ–ª–æ—Å —á–µ—Ä–µ–∑ Whisper (CUDA)‚Ä¶")
    if len(audio) < int(SAMPLE_RATE * MIN_DURATION):
        print("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç.")
        return ""
    
    audio = audio.astype(np.float32) / 32768.0  # int16 ‚Üí float32
    result = whisper_model.transcribe(audio, language="ru", fp16=torch.cuda.is_available())
    return clean_transcript(result["text"])

def clean_transcript(text: str) -> str:
    trash_phrases = [
        "—Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—É–±—Ç–∏—Ç—Ä–æ–≤", "–º—É–∑—ã–∫–∞", "[", "]", "‚ô™", "applause", "noise",
        "–∑–∞—Å—Ç–∞–≤–∫–∞", "—Å–º–µ—Ö", "–∫–∞—à–µ–ª—å", "—Ä–µ—á—å", "–ø–µ—Ä–µ—Ö–æ–¥", "–∑–≤—É–∫–∏"
    ]
    for phrase in trash_phrases:
        text = text.replace(phrase, "")
    return text.strip()