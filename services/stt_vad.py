import subprocess
import tempfile
import soundfile as sf
import sounddevice as sd
import numpy as np
import os
import time

WHISPER_BIN = "E:/ElaineRus/whisper.cpp/build/bin/Release/whisper.exe"
WHISPER_MODEL = "E:/ElaineRus/models/whisper/ggml-medium.bin"

def wait_for_voice(threshold=500, timeout=10, samplerate=16000):
    """–û–∂–∏–¥–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ—Ä–æ–≥ –ø–æ –≥—Ä–æ–º–∫–æ—Å—Ç–∏."""
    print("üéô –ñ–¥—É –Ω–∞—á–∞–ª–∞ —Ä–µ—á–∏...")
    start_time = time.time()
    while time.time() - start_time < timeout:
        audio = sd.rec(int(samplerate * 0.5), samplerate=samplerate,
                       channels=1, dtype='int16')
        sd.wait()
        volume = max(abs(audio.flatten()))
        if volume > threshold:
            print("üü¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –≥–æ–ª–æ—Å, –Ω–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å...")
            return True
    print("üîá –ì–æ–ª–æ—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ‚Äî —Ç–∞–π–º–∞—É—Ç.")
    return False

def record_vad(seconds=2.5, samplerate=16000) -> str:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–≤—É–∫ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ WAV-—Ñ–∞–π–ª—É."""
    if not wait_for_voice():
        return ""
    audio = sd.rec(int(samplerate * seconds), samplerate=samplerate,
                   channels=1, dtype='int16')
    sd.wait()
    volume = max(abs(audio.flatten()))
    if volume < 500:
        print("üîá –°–ª–∏—à–∫–æ–º —Ç–∏—Ö–æ, –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞—é.")
        return ""
    with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as f:
        sf.write(f.name, audio, samplerate, subtype='PCM_16')
        return f.name

def clean_transcript(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –≤—Å—Ç–∞–≤–æ–∫."""
    trash_phrases = ["—Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—É–±—Ç–∏—Ç—Ä–æ–≤", "[", "]", "–º—É–∑—ã–∫–∞", "applause",
                     "noise", "‚ô™"]
    for phrase in trash_phrases:
        text = text.replace(phrase, "")
    return text.strip()

def transcribe_vad(wav_path: str) -> str:
    """–†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ä–µ—á—å –∏–∑ WAV-—Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é Whisper."""
    print("üß† –†–∞—Å–ø–æ–∑–Ω–∞—ë–º –≥–æ–ª–æ—Å —á–µ—Ä–µ–∑ whisper.exe...")
    info = sf.info(wav_path)
    if info.duration < 0.5:
        print("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—é.")
        os.remove(wav_path)
        return ""
    cmd = [
        WHISPER_BIN,
        "-m", WHISPER_MODEL,
        "-l", "ru",
        "--threads", "8",
        wav_path
    ]
    try:
        out = subprocess.run(
            cmd, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL,
            text=True, encoding="utf-8", timeout=15
        ).stdout
        lines = [l for l in out.splitlines() if "-->" in l]
        if not lines:
            return ""
        result = lines[-1].split("]")[-1].strip()
        return clean_transcript(result)
    except subprocess.TimeoutExpired:
        print("‚è≥ Whisper –∑–∞–≤–∏—Å ‚Äî –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏.")
        return ""
    except subprocess.CalledProcessError as e:
        print("‚ùå Whisper –æ—à–∏–±–∫–∞:", e.output)
        return ""
    finally:
        os.remove(wav_path)
