import subprocess
import tempfile
import soundfile as sf
import sounddevice as sd
import numpy as np
import os
import time

# –ü–£–¢–ò –ö WHISPER
WHISPER_BIN = "E:/ElaineRus/whisper.cpp/build/bin/Release/whisper.exe"
WHISPER_MODEL = "E:/ElaineRus/models/whisper/ggml-medium.bin"

# VAD-–ü–ê–†–ê–ú–ï–¢–†–´
THRESHOLD = 500
SAMPLE_RATE = 16000
MIN_DURATION = 0.5
MAX_RECORD_SECONDS = 3.5


def wait_for_voice(threshold=THRESHOLD, timeout=10):
    """–û–∂–∏–¥–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ—á–∏ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–µ."""
    print("üéô –ñ–¥—É –Ω–∞—á–∞–ª–∞ —Ä–µ—á–∏...")
    start_time = time.time()
    while time.time() - start_time < timeout:
        audio = sd.rec(int(SAMPLE_RATE * 0.5), samplerate=SAMPLE_RATE, channels=1, dtype='int16')
        sd.wait()
        volume = max(abs(audio.flatten()))
        if volume > threshold:
            print("üü¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –≥–æ–ª–æ—Å, –Ω–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å...")
            return True
    print("üîá –ì–æ–ª–æ—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ‚Äî —Ç–∞–π–º–∞—É—Ç.")
    return False


def record_vad(seconds=MAX_RECORD_SECONDS) -> str:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–≤—É–∫ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø–æ—Å–ª–µ VAD –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV."""
    if not wait_for_voice():
        return ""
    audio = sd.rec(int(SAMPLE_RATE * seconds), samplerate=SAMPLE_RATE, channels=1, dtype='int16')
    sd.wait()
    volume = max(abs(audio.flatten()))
    if volume < THRESHOLD:
        print("üîá –°–ª–∏—à–∫–æ–º —Ç–∏—Ö–æ, –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞—é.")
        return ""
    os.makedirs("output", exist_ok=True)
    with tempfile.NamedTemporaryFile(suffix=".wav", delete=False, dir="output") as f:
        sf.write(f.name, audio, SAMPLE_RATE, subtype='PCM_16')
        return f.name


def clean_transcript(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å—Ç–∞–≤–∫–∏ –∏ —à—É–º –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    trash_phrases = [
        "—Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—É–±—Ç–∏—Ç—Ä–æ–≤", "–º—É–∑—ã–∫–∞", "[", "]", "‚ô™", "applause", "noise",
        "–∑–∞—Å—Ç–∞–≤–∫–∞", "—Å–º–µ—Ö", "–∫–∞—à–µ–ª—å", "—Ä–µ—á—å", "–ø–µ—Ä–µ—Ö–æ–¥", "–∑–≤—É–∫–∏"
    ]
    for phrase in trash_phrases:
        text = text.replace(phrase, "")
    return text.strip()


def transcribe_vad(wav_path: str) -> str:
    """–†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç WAV-—Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é whisper.cpp."""
    print("üß† –†–∞—Å–ø–æ–∑–Ω–∞—ë–º –≥–æ–ª–æ—Å —á–µ—Ä–µ–∑ whisper.exe...")

    info = sf.info(wav_path)
    if info.duration < MIN_DURATION:
        print("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—é.")
        os.remove(wav_path)
        return ""

    cmd = [
        WHISPER_BIN,
        "-m", WHISPER_MODEL,
        "-l", "ru",
        "--threads", "8",
        wav_path
    ]
    try:
        out = subprocess.run(
            cmd, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL,
            text=True, encoding="utf-8", timeout=15
        ).stdout

        lines = [l for l in out.splitlines() if "-->" in l]
        if not lines:
            return ""
        result = lines[-1].split("]")[-1].strip()
        return clean_transcript(result)

    except subprocess.TimeoutExpired:
        print("‚è≥ Whisper –∑–∞–≤–∏—Å ‚Äî –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏.")
        return ""

    except subprocess.CalledProcessError as e:
        print("‚ùå Whisper –æ—à–∏–±–∫–∞:", e.output)
        return ""

    finally:
        os.remove(wav_path)
